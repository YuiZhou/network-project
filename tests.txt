# tests.txt
# file for test cases and see the result in tests-result.txt
#
# To run this testfile, type the command:
# python tester.py --server=<servername> --port=<port> tests.txt

# When the interpreter runs, it will automatically replace all
# instances of $server with your servername, and all instances of
# $port with your port name.  You can specify any variable you want.
# For example, if you run:
#
# python tester.py --key=<value> p1.multiple.sample
#
# The interpreter will replace all instances of "$key" with "value".

# Connect to the server using the command "connect".  The first value
# in the line is the user running the command.  Each user maintains
# his own socket connection.

user1 connect $server:$port
user2 connect $server:$port
user3 connect $server:$port

# Send data along the socket using the command "send".  The server
# will perceive that the data is received from 3 different clients.
# All data will be automatically suffixed with \r\n.

user1 send NICK nickname1
user2 send USER username2 hostname2 realname2 :server Name
user2 send NICK nickname2
user2 recv
user3 send USER brokendata :Not enough parameters
user3 recv
user3 send USER username3 hostname3 realname3 :server
user3 send NICK nickname2
user3 recv
user3 send NICK nickname3
user3 recv

# With a nickname, user1 specifies its username, hostname and realname

user1 send USER username1 hostname1 realname1 :servername1
user1 recv 

# Enter a new channel and switch channel
user1 send JOIN #network
user1 recv
user2 send JOIN #network
user1 recv
user2 recv
user3 send JOIN #network
user1 recv
user2 recv
user3 recv
user1 send PRIVMSG #network :this is a group message
user1 recv
user2 recv
user3 recv
user2 send JOIN #os
user2 recv
user3 send JOIN #os
user2 recv
user3 recv

# Use recv to check the return value manually, by outputting it to the
# terminal (stdout).

user1 send LIST
user1 recv 

user1 send PART
user1 send LIST
user1 recv

# PRIVMSG send
user2 send PRIVMSG nickname1 :this is a single message
user2 recv
user1 recv
user3 send PRIVMSG nickname1,nickname2 :this is a mutilple message
user3 recv
user1 recv
user2 recv

# WHO command
user1 send WHO #network
user1 recv
user1 send WHO #os
user1 recv

# Once you are done, close the connection with the server.

user1 close
user2 close
user3 close

# Available commands:
#
# connect <hostname>[:port]     - connect to the hostname[:port] given
# send <message>                - send the data immediately after the break
# set (autonewline|autoflush)   - set autonewline or autoflush
# unset (autonewline|autoflush) - unset autonewline or autoflush
# recv                          - force recv() from server and print data to screen
# flush                         - if autoflush is unset, send queued data
# sleep <x>                     - block for x seconds
# close                         - close connection to the server
